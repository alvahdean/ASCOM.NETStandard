// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using RACI.Data;
using System;

namespace EFTool.Migrations
{
    [DbContext(typeof(RaciModel))]
    [Migration("20180617015614_DeviceStates")]
    partial class DeviceStates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RACI.Data.DomeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Altitude");

                    b.Property<bool>("AtHome");

                    b.Property<bool>("AtPark");

                    b.Property<double>("Azimuth");

                    b.Property<bool>("Connected");

                    b.Property<string>("ShutterStatus");

                    b.Property<bool>("Slaved");

                    b.Property<bool>("Slewing");

                    b.HasKey("Id");

                    b.ToTable("DomeStates");
                });

            modelBuilder.Entity("RACI.Data.FilterWheelState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Connected");

                    b.Property<short>("Position");

                    b.HasKey("Id");

                    b.ToTable("FilterWheelStates");
                });

            modelBuilder.Entity("RACI.Data.FocuserState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Connected");

                    b.Property<bool>("Link");

                    b.Property<bool>("TempComp");

                    b.HasKey("Id");

                    b.ToTable("FocuserStates");
                });

            modelBuilder.Entity("RACI.Data.ProfileNode", b =>
                {
                    b.Property<int>("ProfileNodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentProfileNodeId");

                    b.Property<string>("ProfileType")
                        .IsRequired();

                    b.HasKey("ProfileNodeId");

                    b.HasIndex("ParentProfileNodeId", "Name")
                        .IsUnique();

                    b.ToTable("ProfileNodes");

                    b.HasDiscriminator<string>("ProfileType").HasValue("ProfileNode");
                });

            modelBuilder.Entity("RACI.Data.ProfileValue", b =>
                {
                    b.Property<int>("ProfileValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<int>("ParentProfileNodeId");

                    b.Property<string>("Value");

                    b.HasKey("ProfileValueId");

                    b.HasIndex("ParentProfileNodeId", "Key")
                        .IsUnique();

                    b.ToTable("ProfileValues");
                });

            modelBuilder.Entity("RACI.Data.RaciUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("UserSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserSettingsId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RACI.Data.AscomDeviceNode", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");


                    b.ToTable("AscomDeviceNode");

                    b.HasDiscriminator().HasValue("AscomDeviceNode");
                });

            modelBuilder.Entity("RACI.Data.AscomPlatformNode", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");


                    b.ToTable("AscomPlatformNode");

                    b.HasDiscriminator().HasValue("AscomPlatformNode");
                });

            modelBuilder.Entity("RACI.Data.AscomSettingsNode", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");


                    b.ToTable("AscomSettingsNode");

                    b.HasDiscriminator().HasValue("AscomSettingsNode");
                });

            modelBuilder.Entity("RACI.Data.DriverTypeNode", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");


                    b.ToTable("DriverTypeNode");

                    b.HasDiscriminator().HasValue("DriverTypeNode");
                });

            modelBuilder.Entity("RACI.Data.RaciEndpoint", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastAccess");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("ServiceRoot");

                    b.HasIndex("ServiceRoot")
                        .IsUnique();

                    b.ToTable("RaciEndpoint");

                    b.HasDiscriminator().HasValue("RaciEndpoint");
                });

            modelBuilder.Entity("RACI.Data.RaciEndpointDriver", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");

                    b.Property<string>("DriverType");

                    b.ToTable("RaciEndpointDriver");

                    b.HasDiscriminator().HasValue("RaciEndpointDriver");
                });

            modelBuilder.Entity("RACI.Data.RaciSettings", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");


                    b.ToTable("RaciSettings");

                    b.HasDiscriminator().HasValue("RaciSettings");
                });

            modelBuilder.Entity("RACI.Data.RaciSystem", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");

                    b.Property<string>("Hostname");

                    b.ToTable("RaciSystem");

                    b.HasDiscriminator().HasValue("RaciSystem");
                });

            modelBuilder.Entity("RACI.Data.UserSettings", b =>
                {
                    b.HasBaseType("RACI.Data.ProfileNode");

                    b.Property<string>("HomeDir");

                    b.Property<string>("IdentityId");

                    b.Property<string>("UserId");

                    b.ToTable("UserSettings");

                    b.HasDiscriminator().HasValue("UserSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RACI.Data.RaciUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RACI.Data.RaciUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RACI.Data.RaciUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RACI.Data.RaciUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RACI.Data.ProfileNode", b =>
                {
                    b.HasOne("RACI.Data.ProfileNode", "Parent")
                        .WithMany("Nodes")
                        .HasForeignKey("ParentProfileNodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RACI.Data.ProfileValue", b =>
                {
                    b.HasOne("RACI.Data.ProfileNode", "Parent")
                        .WithMany("Values")
                        .HasForeignKey("ParentProfileNodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RACI.Data.RaciUser", b =>
                {
                    b.HasOne("RACI.Data.UserSettings", "UserSettings")
                        .WithOne("Identity")
                        .HasForeignKey("RACI.Data.RaciUser", "UserSettingsId");
                });
#pragma warning restore 612, 618
        }
    }
}
